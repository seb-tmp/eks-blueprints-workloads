apiVersion: apps/v1
kind: Deployment
metadata:
  name: ostoy-microservice
  namespace: team-riker  
  labels:
    app: ostoy-microservice
spec:
  selector:
    matchLabels:
      app: ostoy-microservice
  replicas: 3
  template:
    metadata:
      labels:
        app: ostoy-microservice
    spec:
      containers:
      - name: ostoy-microservice
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
          capabilities:
            drop:
            - ALL
        image: quay.io/ostoylab/ostoy-microservice:1.5.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          protocol: TCP
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"
      {{ if .Values.spec.karpenterInstanceProfile }}
      nodeSelector: # <- add nodeselector, toleration and spread constraitns
        team: default
        type: karpenter
      tolerations:
        - key: 'karpenter'
          operator: 'Exists'
          effect: 'NoSchedule'
      {{ end }}
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app: ostoy-microservice
---
apiVersion: v1
kind: Service
metadata:
  name: ostoy-microservice-service
  labels:
    app: ostoy-microservice
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
  selector:
    app: ostoy-microservice
# ---
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: ostoy-microservice-ingress-nginx
#   namespace: team-riker
#   annotations:
#     nginx.ingress.kubernetes.io/rewrite-target: /$2
#     nginx.ingress.kubernetes.io/use-regex: "true"    
# spec:
#   ingressClassName: nginx
#   rules:
#     - host: 
#       http:
#         paths:
#           - path: /ostoy-microservice(/|$)(.*)
#             pathType: Prefix
#             backend:
#               service:
#                 name: ostoy-microservice-service
#                 port:
#                   number: 8080
# ---
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: ostoy-microservice-ingress
#   namespace: team-riker
#   annotations:
#     alb.ingress.kubernetes.io/scheme: internet-facing
#     alb.ingress.kubernetes.io/target-type: ip
#     alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
#     alb.ingress.kubernetes.io/healthcheck-path: /health
#     alb.ingress.kubernetes.io/tags: Environment=dev,Team=Riker
# spec:
#   ingressClassName: alb
#   rules:
#     - host: #skiapp.{{ .Values.spec.ingress.host }}
#       http:
#         paths:
#           - path: /
#             pathType: Prefix
#             backend:
#               service:
#                 name: ostoy-microservice-service
#                 port:
#                   number: 8080
---                  
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: ostoy-microservice
  namespace: team-riker
spec:
  selector:
    matchLabels:
      app: ostoy-microservice
  maxUnavailable: 1
